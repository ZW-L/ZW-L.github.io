(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{461:function(t,s,e){"use strict";e.r(s);var a=e(25),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("ul",[e("li",[t._v("简介\n"),e("ul",[e("li",[t._v("拥有虚拟机的优点，而且其体积小、启动快、节省硬件资源")]),t._v(" "),e("li",[t._v("拥有持续集成、版本控制、可移植性、隔离性和安全性等优势")]),t._v(" "),e("li",[t._v("还可以使用编排工具批量跨机器操作容器")])])]),t._v(" "),e("li",[t._v("概念\n"),e("ul",[e("li",[e("strong",[t._v("Image")]),t._v("：镜像。类似操作系统的安装镜像，但是 "),e("code",[t._v("Docker")]),t._v(" 中的镜像是分层的，可复用的")]),t._v(" "),e("li",[e("strong",[t._v("Container")]),t._v("：容器。镜像运行时的一个载体，可理解为由镜像生成的实例；依托 Docker 的虚拟化技术，给容器创建了独立的端口、进程、文件等，与宿主机隔离；容器与宿主机之间可以进行 "),e("code",[t._v("port")]),t._v("、"),e("code",[t._v("volumes")]),t._v("、"),e("code",[t._v("network")]),t._v(" 等的通信")]),t._v(" "),e("li",[e("strong",[t._v("Repository")]),t._v("：仓库。类似 "),e("code",[t._v("git")]),t._v(" 仓库，同样有仓库名、"),e("code",[t._v("tag")]),t._v("，是一个庞大的镜像仓库，也可自定义镜像推送到仓库供他人使用，如官方镜像仓库 "),e("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker Hub"),e("OutboundLink")],1)])])])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("备注")]),t._v(" "),e("ul",[e("li",[t._v("Docker 和宿主系统共用硬件设施，只是一个和宿主系统隔离的沙箱容器")]),t._v(" "),e("li",[t._v("简单来说，镜像和容器就是类和实例的关系")])])]),t._v(" "),e("h2",{attrs:{id:"安装配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装配置"}},[t._v("#")]),t._v(" 安装配置")]),t._v(" "),e("ul",[e("li",[t._v("安装 "),e("code",[t._v("docker-ce")])])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装一些必要的系统工具：")]),t._v("\nyum "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -y yum-utils device-mapper-persistent-data lvm2\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加软件源信息：")]),t._v("\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更新 yum 缓存：")]),t._v("\nyum makecache fast\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装 Docker-ce：")]),t._v("\nyum -y "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" docker-ce\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看安装是否成功")]),t._v("\ndocker --version\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动 Docker 后台服务")]),t._v("\nsystemctl start docker\n")])])]),e("ul",[e("li",[t._v("镜像加速")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入目录")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /etc/docker\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打开/创建 daemon.json 文件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" daemon.json\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3.添加源")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"registry-mirrors"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://hub-mirror.c.163.com"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 其他源")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# https://cr.console.aliyun.com (阿里云专属镜像源，需要登录配置生成)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# https://registry.docker-cn.com (Docker 官方中国区)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# http://hub-mirror.c.163.com (网易)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# https://docker.mirrors.ustc.edu.cn (ustc)")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启 Docker 后台服务")]),t._v("\nsystemctl restart docker\n")])])]),e("ul",[e("li",[t._v("删除 Docker")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("yum remove docker-ce\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf /var/lib/docker\n")])])]),e("h2",{attrs:{id:"问题解决"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题解决"}},[t._v("#")]),t._v(" 问题解决")]),t._v(" "),e("ul",[e("li",[t._v("安装提示：package docker-ce-3:19.03.11-3.el7.x86_64 requires containerd.io >= 1.2.2-3 but none of...")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 解析：需要更高版本的 containerd.io")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.通过阿里云镜像库安装符合 docker-ce 最新版本的 containerd.io")]),t._v("\nyum "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -y https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.13-3.2.el7.x86_64.rpm\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2.再继续安装 docker-ce")]),t._v("\nyum -y "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" docker-ce docker-ce-cli\n")])])]),e("ul",[e("li",[t._v("运行容器时报错：Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?...")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 解析：需要重启 docker 守护进程")]),t._v("\nsystemctl daemon-reload   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新加载守护进程")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" docker restart    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启 docker 服务")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" docker status     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 docker 状态，若看到 Active: active(running) 则成功")]),t._v("\ndocker run hello-world    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新运行")]),t._v("\n")])])]),e("ul",[e("li",[t._v("启动容器后没有提示或查看不到运行的容器")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 解析：docker 的命令执行完成就会自动退出，为了防止线程退出，可以使用一些参数或命令将线程挂起")]),t._v("\ndocker run -dt --name nodeContainer ubuntu:18.04 /bin/bash\n")])])]),e("h2",{attrs:{id:"应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),e("ul",[e("li",[t._v("一键配置开发环境")]),t._v(" "),e("li",[t._v("Web 应用自动化打包和发布")]),t._v(" "),e("li",[t._v("自动化测试和持续集成")]),t._v(" "),e("li",[t._v("部署服务器生产环境和调整数据库或其他的后台应用")]),t._v(" "),e("li",[t._v("从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境")])])])}),[],!1,null,null,null);s.default=n.exports}}]);