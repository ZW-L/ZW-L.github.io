(window.webpackJsonp=window.webpackJsonp||[]).push([[308],{733:function(t,s,a){"use strict";a.r(s);var e=a(25),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"正则-api-解决常见问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则-api-解决常见问题"}},[t._v("#")]),t._v(" 正则 API & 解决常见问题")]),t._v(" "),a("p",[a("strong",[t._v("API：")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("regex.exec(str)")]),t._v("：在目标字符串中执行一次正则匹配操作")]),t._v(" "),a("li",[a("code",[t._v("regex.test(str)")]),t._v("：测试当前正则是否能匹配目标字符串，返回布尔值")]),t._v(" "),a("li",[a("code",[t._v("regex[Symbol.match](str)")]),t._v("：相当于 "),a("code",[t._v("str.match(regex)")]),t._v("，全局匹配时返回匹配结果数组，非全局匹配时返回包含匹配信息的数组")]),t._v(" "),a("li",[a("code",[t._v("regex[Symbol.replace](str, newStr|function)")]),t._v("：相当于 "),a("code",[t._v("str.replace(regex, newStr|function)")]),t._v("，返回结果字符串")]),t._v(" "),a("li",[a("code",[t._v("regex[Symbol.search](str)")]),t._v("：相当于 "),a("code",[t._v("str.search(regex)")]),t._v("，返回符合搜索的首个索引或 "),a("code",[t._v("-1")])]),t._v(" "),a("li",[a("code",[t._v("regex[Symbol.split](str[, limit])")]),t._v("：相当于 "),a("code",[t._v("str.split(regex)")]),t._v("，返回结果数组")]),t._v(" "),a("li",[a("code",[t._v("regex.toString()")]),t._v("：返回正则对象的字面量形式的字符串")])]),t._v(" "),a("p",[a("strong",[t._v("解决问题：")])]),t._v(" "),a("ul",[a("li",[t._v("邮箱验证")]),t._v(" "),a("li",[t._v("URL 解析")]),t._v(" "),a("li",[t._v("去重")])]),t._v(" "),a("h2",{attrs:{id:"数组常用-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组常用-api"}},[t._v("#")]),t._v(" 数组常用 API")]),t._v(" "),a("p",[a("strong",[t._v("变异方法：")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("sort()")]),t._v("：数组排序，可接受一个排序函数(排序函数接受两个参数)，返回排序后的数组")]),t._v(" "),a("li",[a("code",[t._v("reverse()")]),t._v("：反转数组，无参数，返回反转后的数组")]),t._v(" "),a("li",[a("code",[t._v("pop()")]),t._v(", "),a("code",[t._v("push()")]),t._v(", "),a("code",[t._v("shift()")]),t._v(", "),a("code",[t._v("unshift()")]),t._v("：栈和队列相关方法，返回值为传入的参数或弹出的值")]),t._v(" "),a("li",[a("code",[t._v("splice()")]),t._v("：删除、插入或替换(可接受三个参数：起始下标、删除的项数、插入的项)，返回修改后的数组")]),t._v(" "),a("li",[a("code",[t._v("forEach()")]),t._v("：接受一个函数，将数组值逐个传入该函数，返回修改后的数组")]),t._v(" "),a("li",[a("code",[t._v("copyWithin()")]),t._v("：将一段元素序列拷贝到另一段元素序列上，覆盖原有的值")])]),t._v(" "),a("p",[a("strong",[t._v("非变异方法：")])]),t._v(" "),a("ul",[a("li",[t._v("静态方法：\n"),a("ul",[a("li",[a("code",[t._v("Array.isArray()")]),t._v("：判断是否是数组")]),t._v(" "),a("li",[a("code",[t._v("Array.from()")]),t._v("：从类数组对象或者可迭代对象中创建一个新的数组实例")]),t._v(" "),a("li",[a("code",[t._v("Array.of()")]),t._v("：根据一组参数来创建新的数组实例，支持任意的参数数量和类型")])])]),t._v(" "),a("li",[t._v("查找过滤：\n"),a("ul",[a("li",[a("code",[t._v("every()")]),t._v("：接受函数为参数，用于测试数组每一个值，都通过测试时返回 "),a("code",[t._v("true")])]),t._v(" "),a("li",[a("code",[t._v("some()")]),t._v("：接受函数为参数，用于测试数组每一个值，至少有一个通过测试时返回 "),a("code",[t._v("true")])]),t._v(" "),a("li",[a("code",[t._v("includes()")]),t._v("：数组包含指定值时，返回 "),a("code",[t._v("true")])]),t._v(" "),a("li",[a("code",[t._v("filter()")]),t._v("：接受函数为参数，对数组进行过滤，返回过滤后的数组")]),t._v(" "),a("li",[a("code",[t._v("find()")]),t._v("：接受函数为参数，返回第一个通过测试函数的元素或 "),a("code",[t._v("undefined")])]),t._v(" "),a("li",[a("code",[t._v("findIndex()")]),t._v("：接受函数为参数，返回第一个通过测试函数的元素下标或 "),a("code",[t._v("-1")])]),t._v(" "),a("li",[a("code",[t._v("indexOf()")]),t._v("：返回第一个与指定值相等的元素的下标或 "),a("code",[t._v("-1")])]),t._v(" "),a("li",[a("code",[t._v("lastIndexOf()")]),t._v("：返回最后一个与指定值相等的元素的下标或 "),a("code",[t._v("-1")])])])]),t._v(" "),a("li",[t._v("迭代方法：\n"),a("ul",[a("li",[a("code",[t._v("map()")]),t._v("：接受函数为参数，与 "),a("code",[t._v("forEach()")]),t._v(" 类似，但是不会修改原数组，而是创建新数组")]),t._v(" "),a("li",[a("code",[t._v("reduce()")]),t._v("：接受函数参数和迭代初值，从左到右为每个数组元素执行一次回调函数，把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值")]),t._v(" "),a("li",[a("code",[t._v("reduceRight()")]),t._v("：接受函数参数和迭代初值，与 "),a("code",[t._v("reduce()")]),t._v(" 类似，但是从数组尾部开始迭代")])])]),t._v(" "),a("li",[t._v("其他：\n"),a("ul",[a("li",[a("code",[t._v("concat()")]),t._v("：拼接数组，返回新数组")]),t._v(" "),a("li",[a("code",[t._v("fill()")]),t._v("：使用固定值填充数组，返回新数组")]),t._v(" "),a("li",[a("code",[t._v("slice()")]),t._v("：提取数组的部分元素，返回新数组")]),t._v(" "),a("li",[a("code",[t._v("keys()")]),t._v("：返回数组的所有键的可迭代对象("),a("code",[t._v("Iterator")]),t._v(")")]),t._v(" "),a("li",[a("code",[t._v("values()")]),t._v("：返回数组的所有值的可迭代对象("),a("code",[t._v("Iterator")]),t._v(")")]),t._v(" "),a("li",[a("code",[t._v("entries()")]),t._v("：返回数组的所有键值数组的可迭代对象("),a("code",[t._v("Iterator")]),t._v(")")]),t._v(" "),a("li",[a("code",[t._v("join()")]),t._v("：通过指定字符连接数组元素，返回一个字符串")]),t._v(" "),a("li",[a("code",[t._v("toLocaleString()")]),t._v("：返回一个由所有数组元素组合而成的本地化后的字符串")]),t._v(" "),a("li",[a("code",[t._v("toString()")]),t._v("：返回一个由所有数组元素组合而成的字符串，默认为 "),a("code",[t._v("join(',')")])]),t._v(" "),a("li",[a("code",[t._v("valueOf()")]),t._v("：返回数组对象的原始值")])])])]),t._v(" "),a("h2",{attrs:{id:"如何中断-foreach"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何中断-foreach"}},[t._v("#")]),t._v(" 如何中断 forEach")]),t._v(" "),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("try...catch")]),t._v(" 监视代码块，在需要终端的地方抛出异常")]),t._v(" "),a("li",[t._v("使用其他方法代替 "),a("code",[t._v("forEach")])])]),t._v(" "),a("h2",{attrs:{id:"将-arguments-转化为数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将-arguments-转化为数组"}},[t._v("#")]),t._v(" 将 arguments 转化为数组")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Array.prototype.slice.call(arguments)")])]),t._v(" "),a("li",[a("code",[t._v("Array.prototype.concat.apply([], arguments)")])]),t._v(" "),a("li",[a("code",[t._v("Array.from(arguments)")])]),t._v(" "),a("li",[a("code",[t._v("[...arguments]")])])]),t._v(" "),a("h2",{attrs:{id:"call-apply-bind-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-apply-bind-的区别"}},[t._v("#")]),t._v(" call/apply/bind 的区别")]),t._v(" "),a("ul",[a("li",[t._v("三者都接收一个对象(或 "),a("code",[t._v("null")]),t._v(")作为 "),a("code",[t._v("this")]),t._v(" 的绑定")]),t._v(" "),a("li",[a("code",[t._v("call()")]),t._v(" 和 "),a("code",[t._v("apply()")]),t._v(" 只是执行函数，"),a("code",[t._v("bind()")]),t._v(" 不执行函数，但是会返回一个新的函数")]),t._v(" "),a("li",[a("code",[t._v("call()")]),t._v(" 和 "),a("code",[t._v("apply()")]),t._v(" 行为基本一致，只是 "),a("code",[t._v("call()")]),t._v(" 的额外参数需要一个一个传入；而 "),a("code",[t._v("apply()")]),t._v(" 的额外参数作为一个数组传入，而且第二个参数之后的所有参数都会忽略")])]),t._v(" "),a("h2",{attrs:{id:"以下代码的输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#以下代码的输出"}},[t._v("#")]),t._v(" 以下代码的输出")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parseInt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("输出："),a("code",[t._v("[ 11, NaN, 3, 4 ]")])]),t._v(" "),a("li",[t._v("解析："),a("code",[t._v("map")]),t._v(" 的第一个参数是回调函数，它接受三个参数(分别为当前元素、当前元素索引、整个数组)，而 "),a("code",[t._v("parseInt")]),t._v(" 函数接受两个参数(分别为要转化的字符串、转换的进制)，这样使用会意外地将第二个参数传入，相当于：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 11  (指定为0时会默认使用 10 作为基数)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN (1 为无效基数，直接返回 NaN)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n")])])]),a("h2",{attrs:{id:"解释以下代码的输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解释以下代码的输出"}},[t._v("#")]),t._v(" 解释以下代码的输出")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" f\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" f\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("输出："),a("code",[t._v("1undefined")]),t._v(" 和 "),a("code",[t._v("1function")])])]),t._v(" "),a("p",[a("strong",[t._v("解析：")])]),t._v(" "),a("ul",[a("li",[t._v("只要条件语句返回的值不是六个假值("),a("code",[t._v("false")]),t._v("："),a("code",[t._v("0")]),t._v(", "),a("code",[t._v("undefined")]),t._v(", "),a("code",[t._v("null")]),t._v(", "),a("code",[t._v("NaN")]),t._v(", "),a("code",[t._v("''")]),t._v(", "),a("code",[t._v("false")]),t._v(")之一，"),a("code",[t._v("if")]),t._v(" 语句块内的代码都会执行")]),t._v(" "),a("li",[t._v("在 if 语句中使用赋值语句时，它相当于创建一个变量：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" f\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1function")]),t._v("\n")])])]),a("h2",{attrs:{id:"异常处理的方式-异常处理的方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理的方式-异常处理的方案"}},[t._v("#")]),t._v(" 异常处理的方式 & 异常处理的方案")]),t._v(" "),a("p",[a("strong",[t._v("异常处理说明：")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("try...catch...finally")]),t._v(" 语句块，其中 "),a("code",[t._v("try")]),t._v(" 语句时必需的，"),a("code",[t._v("catch")]),t._v(" 和 "),a("code",[t._v("finally")]),t._v(" 应至少有一个")]),t._v(" "),a("li",[t._v("当 "),a("code",[t._v("try")]),t._v(" 语句块中执行出现异常时，"),a("code",[t._v("try")]),t._v(" 语句块中剩余的代码均不会执行")]),t._v(" "),a("li",[a("code",[t._v("catch")]),t._v(" 语句块必须接受一个表示异常类型的名称(任意一个命名都可以)，即使在语句块中不需要使用")]),t._v(" "),a("li",[t._v("不管有没有发生异常，"),a("code",[t._v("finally")]),t._v(" 语句块在最后都会执行，在 "),a("code",[t._v("try")]),t._v(" 或 "),a("code",[t._v("catch")]),t._v(" 中添加 "),a("code",[t._v("return")]),t._v(" 语句也不能逃离 "),a("code",[t._v("finally")])]),t._v(" "),a("li",[t._v("当 "),a("code",[t._v("finally")]),t._v(" 语句块中包含 "),a("code",[t._v("return")]),t._v(" 语句时，它一定会返回，此时会覆盖 "),a("code",[t._v("try")]),t._v(" 或 "),a("code",[t._v("catch")]),t._v(" 中的 "),a("code",[t._v("return")]),t._v(" 语句")])]),t._v(" "),a("p",[a("strong",[t._v("异常处理方案：")])]),t._v(" "),a("h2",{attrs:{id:"解释-try-的-return-语句不能终止-finally"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解释-try-的-return-语句不能终止-finally"}},[t._v("#")]),t._v(" 解释 try 的 return 语句不能终止 finally")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("finally")]),t._v(" 块用于包含清理代码(关闭文件等)，因此始终执行 "),a("code",[t._v("finally")]),t._v(" 语句块是有必要的")])])])}),[],!1,null,null,null);s.default=n.exports}}]);