(window.webpackJsonp=window.webpackJsonp||[]).push([[360],{791:function(e,t,s){"use strict";s.r(t);var a=s(25),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://nodejs.cn/api/process.html#process_process",target:"_blank",rel:"noopener noreferrer"}},[e._v("process"),s("OutboundLink")],1),e._v(" 对象是一个全局变量，它提供有关当前 Node.js 进程的信息并对其进行控制")]),e._v(" "),s("li",[s("code",[e._v("process")]),e._v(" 对象是 "),s("code",[e._v("EventEmitter")]),e._v(" 的实例")])]),e._v(" "),s("h2",{attrs:{id:"事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[e._v("#")]),e._v(" 事件")]),e._v(" "),s("h3",{attrs:{id:"beforeexit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beforeexit"}},[e._v("#")]),e._v(" beforeExit")]),e._v(" "),s("ul",[s("li",[e._v("触发：当 Node.js 清空其事件循环并且没有其他工作要安排时")]),e._v(" "),s("li",[e._v("回调参数："),s("code",[e._v("process.exitCode")]),e._v(" 属性指定的退出码")]),e._v(" "),s("li",[e._v("通常，Node.js 进程将在没有调度工作时退出，但是在 "),s("code",[e._v("beforeExit")]),e._v(" 事件上注册的监听器可以进行异步调用，从而导致 Node.js 进程继续")]),e._v(" "),s("li",[e._v("对于导致显式终止的条件，不会触发 "),s("code",[e._v("beforeExit")]),e._v(" 事件，例如调用 "),s("code",[e._v("process.exit()")]),e._v(" 或未捕获的异常")]),e._v(" "),s("li",[e._v("因此除非打算安排额外的工作，否则不应将 "),s("code",[e._v("beforeExit")]),e._v(" 用作 "),s("code",[e._v("exit")]),e._v(" 事件的替代方案")])]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[e._v("process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'beforeExit'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("code")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'进程 beforeExit 事件的代码: '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\nprocess"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'exit'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("code")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'进程 exit 事件的代码: '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'此消息最新显示'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 此消息最新显示")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 进程 beforeExit 事件的代码: 0")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 进程 exit 事件的代码: 0")]),e._v("\n")])])]),s("h3",{attrs:{id:"exit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exit"}},[e._v("#")]),e._v(" exit")]),e._v(" "),s("ul",[s("li",[e._v("触发：显式调用 "),s("code",[e._v("process.exit()")]),e._v(" 或 Node.js 事件循环不再执行其他工作时")]),e._v(" "),s("li",[e._v("回调参数："),s("code",[e._v("process.exitCode")]),e._v(" 属性指定的退出码或传给 "),s("code",[e._v("process.exit()")]),e._v(" 方法的 "),s("code",[e._v("exitCode")]),e._v(" 参数")]),e._v(" "),s("li",[e._v("此时无法阻止退出事件循环，一旦所有 "),s("code",[e._v("exit")]),e._v(" 事件的监听器都已完成运行时，Node.js 进程将终止")]),e._v(" "),s("li",[e._v("监听器函数必须只执行同步操作(此时 Node.js 进程已退出，任何异步操作都会被放弃)")])]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[e._v("process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'exit'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("code")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'此处不会运行'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("h3",{attrs:{id:"disconnect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#disconnect"}},[e._v("#")]),e._v(" disconnect")]),e._v(" "),s("ul",[s("li",[e._v("触发：使用 IPC 通道衍生了 Node.js 进程，在 IPC 通道关闭时")])]),e._v(" "),s("h3",{attrs:{id:"message"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#message"}},[e._v("#")]),e._v(" message")]),e._v(" "),s("ul",[s("li",[e._v("触发：使用 IPC 通道衍生了 Node.js 进程，当子进程收到父进程使用 "),s("code",[e._v("send()")]),e._v(" 发送的消息时触发")]),e._v(" "),s("li",[e._v("消息会进行序列化和解析，生成的消息可能与最初发送的消息不同")]),e._v(" "),s("li",[e._v("如果在衍生进程时设置了 "),s("code",[e._v("serialization: advanced")]),e._v("，则 message 参数可以包含 JSON 无法表示的数据")])]),e._v(" "),s("h3",{attrs:{id:"multipleresolves"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#multipleresolves"}},[e._v("#")]),e._v(" multipleResolves")]),e._v(" "),s("ul",[s("li",[e._v("触发：当 "),s("code",[e._v("Promise")]),e._v(" 被 "),s("code",[e._v("resolve")]),e._v("/"),s("code",[e._v("reject")]),e._v(" 不止一次或在两者之间切换时")]),e._v(" "),s("li",[e._v("对于在使用 Promise 构造函数时跟踪应用程序中的潜在错误非常有用，因为会以静默方式吞没多个解决")]),e._v(" "),s("li",[e._v("但事件的发生并不一定表示错误，如 "),s("code",[e._v("Promise.race()")]),e._v(" 可以触发该事件")])]),e._v(" "),s("h3",{attrs:{id:"rejectionhandled"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rejectionhandled"}},[e._v("#")]),e._v(" rejectionHandled")]),e._v(" "),s("ul",[s("li",[e._v("触发：当 "),s("code",[e._v("Promise")]),e._v(" 被拒绝并且错误处理函数附加到晚于一个 Node.js 事件循环时")])]),e._v(" "),s("h3",{attrs:{id:"unhandledrejection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unhandledrejection"}},[e._v("#")]),e._v(" unhandledRejection")]),e._v(" "),s("ul",[s("li",[e._v("触发：当 "),s("code",[e._v("Promise")]),e._v(" 被 reject 但它没有没有绑定错误处理器时")]),e._v(" "),s("li",[e._v("该事件在探测和跟踪 promise 被 reject 且未被处理的场景中是很有用的")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("备注：")]),e._v(" "),s("ul",[s("li",[e._v("使用 Promise 时，异常会以被 reject 的 promise 的形式封装")]),e._v(" "),s("li",[e._v("reject 可以被 "),s("code",[e._v("promise.catch()")]),e._v(" 捕获并处理，并且在 Promise 链中传播")])])]),e._v(" "),s("h3",{attrs:{id:"uncaughtexception"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uncaughtexception"}},[e._v("#")]),e._v(" uncaughtException")]),e._v(" "),s("ul",[s("li",[e._v("触发：未捕获的 JS 异常一直冒泡回到事件循环时")]),e._v(" "),s("li",[e._v("默认情况下，Node.js 通过将堆栈跟踪打印到 stderr 并使用 "),s("code",[e._v("exitCode: 1")]),e._v(" 来处理此类异常(覆盖先前设置的 "),s("code",[e._v("process.exitCode")]),e._v(")")]),e._v(" "),s("li",[e._v("为该事件添加处理程序会覆盖默认行为")]),e._v(" "),s("li",[e._v("更改事件处理程序中的 "),s("code",[e._v("process.exitCode")]),e._v(" 将导致进程退出并提供退出码，在存在这样的处理程序的情况下，进程将以 0 退出(避免出现无限循环的情况)")]),e._v(" "),s("li",[e._v("设置 "),s("code",[e._v("uncaughtExceptionMonitor")]),e._v(" 监听器，可以监视该事件，而不会覆盖默认行为以退出该进程")])]),e._v(" "),s("h3",{attrs:{id:"uncaughtexceptionmonitor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uncaughtexceptionmonitor"}},[e._v("#")]),e._v(" uncaughtExceptionMonitor")]),e._v(" "),s("ul",[s("li",[e._v("触发：在 "),s("code",[e._v("uncaughtException")]),e._v(" 事件触发前或调用 "),s("code",[e._v("process.setUncaughtExceptionCaptureCallback()")])])]),e._v(" "),s("h3",{attrs:{id:"warning"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#warning"}},[e._v("#")]),e._v(" warning")]),e._v(" "),s("ul",[s("li",[e._v("触发：当 Node.js 触发进程警告时")]),e._v(" "),s("li",[e._v("默认打印进程警告到 stderr，使用一些命令行选项\n"),s("ul",[s("li",[s("code",[e._v("--no-warnings")]),e._v("：阻止从 console 输出信息，但是 "),s("code",[e._v("warning")]),e._v(" 事件仍会被 process 发出")]),e._v(" "),s("li",[s("code",[e._v("--trace-warnings")]),e._v("：让默认的控制台输出警告信息时，包含警告的全部堆栈信息")]),e._v(" "),s("li",[s("code",[e._v("--trace-deprecation")]),e._v("：使自定义的弃用警告作为异常信息抛出来")]),e._v(" "),s("li",[s("code",[e._v("--throw-deprecation")]),e._v("：使自定义的弃用警告打印到 stderr，包括其堆栈信息")]),e._v(" "),s("li",[s("code",[e._v("--no-deprecation")]),e._v("：阻止报告所有的自定义的弃用警告")]),e._v(" "),s("li",[s("code",[e._v("*-deprecation")]),e._v("：只会影响使用名字为 "),s("code",[e._v("DeprecationWarning")]),e._v(" 的警告")])])])]),e._v(" "),s("h2",{attrs:{id:"属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[e._v("#")]),e._v(" 属性")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("allowedNodeEnvironmentFlags: Set")]),e._v(": NODE_OPTIONS 环境变量中允许的特殊只读标志集合")]),e._v(" "),s("li",[s("code",[e._v("arch: string")]),e._v(": 编译 Node.js 二进制文件的操作系统的 CPU 架构")]),e._v(" "),s("li",[s("code",[e._v("argv: string[]")]),e._v(": 启动 Node.js 进程时传入的命令行参数")]),e._v(" "),s("li",[s("code",[e._v("argv0: string")]),e._v(": 启动 Node.js 进程时传入的 argv[0] 的原始值的只读副本")]),e._v(" "),s("li",[s("code",[e._v("channel: object | undefined")]),e._v(": IPC 通道的引用，否则为 "),s("code",[e._v("undefined")])]),e._v(" "),s("li",[s("code",[e._v("config: object")]),e._v(": 编译当前 Node.js 可执行文件的配置选项")]),e._v(" "),s("li",[s("code",[e._v("connected: boolean")]),e._v(": 指示 IPC 通道是否连接")]),e._v(" "),s("li",[s("code",[e._v("debugPort: number")]),e._v(": Node.js 调试器使用的端口")]),e._v(" "),s("li",[s("code",[e._v("env: object")]),e._v(": 用户环境的对象")]),e._v(" "),s("li",[s("code",[e._v("execArgv: string[]")]),e._v(": 当 Node.js 进程被启动时，Node.js 特定的命令行选项")]),e._v(" "),s("li",[s("code",[e._v("execPath: string")]),e._v(": 启动 Node.js 进程的可执行文件的绝对路径名")]),e._v(" "),s("li",[s("code",[e._v("exitCode: integer")]),e._v(": 默认的进程退出码")]),e._v(" "),s("li",[s("code",[e._v("mainModule: object | undefined")]),e._v(": 获取 require.main 的替代方式")]),e._v(" "),s("li",[s("code",[e._v("noDeprecation: boolean")]),e._v(": 指示当前 Node.js 进程是否设置了 --no-deprecation 标志")]),e._v(" "),s("li",[s("code",[e._v("throwDeprecation: boolean")]),e._v(": 指示当前的 Node.js 进程是否设置了 --throw-deprecation 标志")]),e._v(" "),s("li",[s("code",[e._v("traceDeprecation: boolean")]),e._v(": 指示当前的 Node.js 进程是否设置了 --trace-deprecation 标志")]),e._v(" "),s("li",[s("code",[e._v("pid: integer")]),e._v(": 返回进程的 PID")]),e._v(" "),s("li",[s("code",[e._v("platform: string")]),e._v(": 返回 Node.js 进程的操作系统平台")]),e._v(" "),s("li",[s("code",[e._v("ppid: integer")]),e._v(": 返回当前父进程的 PID")]),e._v(" "),s("li",[s("code",[e._v("release: object")]),e._v(": 返回与当前发布相关的元数据")]),e._v(" "),s("li",[s("code",[e._v("stderr: Stream")]),e._v(": 返回连接到 stderr 的流")]),e._v(" "),s("li",[s("code",[e._v("stdin: Stream")]),e._v(": 返回连接到 stdin 的流")]),e._v(" "),s("li",[s("code",[e._v("stdout: Stream")]),e._v(": 返回连接到 stdout 的流")]),e._v(" "),s("li",[s("code",[e._v("title: string")]),e._v(": 返回当前进程标题")]),e._v(" "),s("li",[s("code",[e._v("version: string")]),e._v(": 返回 Node.js 的版本信息")]),e._v(" "),s("li",[s("code",[e._v("versions: object")]),e._v(": 返回 Node.js 和其依赖的版本信息")])]),e._v(" "),s("h2",{attrs:{id:"方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),s("h3",{attrs:{id:"进程相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程相关"}},[e._v("#")]),e._v(" 进程相关")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("abort()")]),e._v("：结束进程并生成一个核心文件")]),e._v(" "),s("li",[s("code",[e._v("cpuUsage([previousValue])")]),e._v("：返回进程的用户 CPU 时间和系统 CPU 时间信息")]),e._v(" "),s("li",[s("code",[e._v("disconnect()")]),e._v("：关闭连接到父进程的 IPC 通道")]),e._v(" "),s("li",[s("code",[e._v("dlopen(module, filename[, flags])")]),e._v("：动态加载共享对象")]),e._v(" "),s("li",[s("code",[e._v("emitWarning(warning[, options])")]),e._v("：触发自定义或应用特定的进程警告")]),e._v(" "),s("li",[s("code",[e._v("emitWarning(warning[, type[, code]][, ctor])")]),e._v("：触发自定义或应用特定的进程警告")]),e._v(" "),s("li",[s("code",[e._v("exit([code])")]),e._v("：以指定退出状态码终止进程")]),e._v(" "),s("li",[s("code",[e._v("hasUncaughtExceptionCaptureCallback()")]),e._v("：是否使用 "),s("code",[e._v("setUncaughtExceptionCaptureCallback()")]),e._v(" 设置回调")]),e._v(" "),s("li",[s("code",[e._v("kill(pid[, signal])")]),e._v("：向另一个进程发送信号")]),e._v(" "),s("li",[s("code",[e._v("memoryUsage()")]),e._v("：返回 Node.js 进程的内存使用情况，包括以下几个属性：\n"),s("ul",[s("li",[s("code",[e._v("rss")]),e._v("：常驻内存的大小")]),e._v(" "),s("li",[s("code",[e._v("heapTotal")]),e._v("：动态分配的可用内存")]),e._v(" "),s("li",[s("code",[e._v("heapUsed")]),e._v("：已使用的堆大小")])])]),e._v(" "),s("li",[s("code",[e._v("resourceUsage()")]),e._v("：")]),e._v(" "),s("li",[s("code",[e._v("send(message[, sendHandle[, options]][, callback])")]),e._v("：将消息发送到父进程(进程必须使用 IPC 通道衍生)")]),e._v(" "),s("li",[s("code",[e._v("setUncaughtExceptionCaptureCallback(fn)")]),e._v("：")]),e._v(" "),s("li",[s("code",[e._v("umask([mask])")]),e._v("：设置/返回 Node.js 进程的默认创建文件的权限掩码")]),e._v(" "),s("li",[s("code",[e._v("uptime()")]),e._v("：返回当前 Node.js 进程运行时间(秒)")])]),e._v(" "),s("h3",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[e._v("#")]),e._v(" 其他")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("cwd()")]),e._v("：返回当前的工作目录")]),e._v(" "),s("li",[s("code",[e._v("chdir(directory)")]),e._v("：切换当前的工作目录")]),e._v(" "),s("li",[s("code",[e._v("hrtime([time])")]),e._v("：返回当前时间的高精度解析值")]),e._v(" "),s("li",[s("code",[e._v("hrtime.bigint()")]),e._v("：返回当前的高精度实际时间")]),e._v(" "),s("li",[s("code",[e._v("nextTick(callback[, ...args])")]),e._v("：将 callback 添加到下一个时间点的事件队列")])]),e._v(" "),s("h3",{attrs:{id:"posix-平台"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#posix-平台"}},[e._v("#")]),e._v(" POSIX 平台")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("getgid()")]),e._v("：返回进程的数字标记的组身份")]),e._v(" "),s("li",[s("code",[e._v("getuid()")]),e._v("：返回进程的数字标记的用户身份")]),e._v(" "),s("li",[s("code",[e._v("getegid()")]),e._v("：返回 Node.js 进程的有效数字标记的组身份")]),e._v(" "),s("li",[s("code",[e._v("geteuid()")]),e._v("：返回进程的有效数字标记的用户身份")]),e._v(" "),s("li",[s("code",[e._v("setgid(id)")]),e._v("：为进程设置组标识")]),e._v(" "),s("li",[s("code",[e._v("setuid(id)")]),e._v("：为进程设置用户标识")]),e._v(" "),s("li",[s("code",[e._v("setegid(id)")]),e._v("：为进程设置有效的组标识")]),e._v(" "),s("li",[s("code",[e._v("seteuid(id)")]),e._v("：为进程设置有效的用户标识")]),e._v(" "),s("li",[s("code",[e._v("getgroups()")]),e._v("：返回补充的组 ID")]),e._v(" "),s("li",[s("code",[e._v("setgroups(groups)")]),e._v("：为进程补充组 ID")]),e._v(" "),s("li",[s("code",[e._v("initgroups(user, extraGroup)")]),e._v("：读取 "),s("code",[e._v("/etc/group")]),e._v(" 文件并初始化组访问列表，包括了用户所在的所有组")])])])}),[],!1,null,null,null);t.default=v.exports}}]);