(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{537:function(t,v,_){"use strict";_.r(v);var s=_(25),e=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),_("h3",{attrs:{id:"http-历史"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-历史"}},[t._v("#")]),t._v(" HTTP 历史")]),t._v(" "),_("p",[_("code",[t._v("HTTP")]),t._v("(Hyper Text Transfer Protocol，超文本传输协议)，用于传输 "),_("code",[t._v("HTML")]),t._v("(Hyper Text Markup Language，超文本标记语言)文档的一种协议。并且是基于 "),_("code",[t._v("TCP")]),t._v(" 协议实现的。")]),t._v(" "),_("ul",[_("li",[t._v("1990 年，由 Tim Berners-Lee 提出")]),t._v(" "),_("li",[t._v("1990 年，提出 HTTP/0.9，但没有作为正式的标准")]),t._v(" "),_("li",[t._v("1996 年，推出 HTTP/1.0")]),t._v(" "),_("li",[t._v("1997 年，推出 HTTP/1.1 (当前使用广泛的版本)")]),t._v(" "),_("li",[t._v("2015 年，推出 HTTP/2.0")])]),t._v(" "),_("h3",{attrs:{id:"常见-http-状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常见-http-状态码"}},[t._v("#")]),t._v(" 常见 HTTP 状态码")]),t._v(" "),_("p",[_("strong",[t._v("状态码分类：")])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("状态码")]),t._v(" "),_("th",[t._v("分类")]),t._v(" "),_("th",[t._v("说明")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("1xx")]),t._v(" "),_("td",[t._v("信息类")]),t._v(" "),_("td",[t._v("请求已接收，正在处理")])]),t._v(" "),_("tr",[_("td",[t._v("2xx")]),t._v(" "),_("td",[t._v("响应成功类")]),t._v(" "),_("td",[t._v("请求已接收、处理且响应成功")])]),t._v(" "),_("tr",[_("td",[t._v("3xx")]),t._v(" "),_("td",[t._v("页面重定向类")]),t._v(" "),_("td",[t._v("需要其他操作才能完成请求")])]),t._v(" "),_("tr",[_("td",[t._v("4xx")]),t._v(" "),_("td",[t._v("客户端错误类")]),t._v(" "),_("td",[t._v("客户端请求出现错误或不符合服务器预期，导致服务端无法处理请求")])]),t._v(" "),_("tr",[_("td",[t._v("5xx")]),t._v(" "),_("td",[t._v("服务端错误类")]),t._v(" "),_("td",[t._v("服务端处理请求时出错")])])])]),t._v(" "),_("p",[_("strong",[t._v("常见状态码：")])]),t._v(" "),_("p",[t._v("查看"),_("a",{attrs:{href:"/appendix/http-referrence/status-code"}},[t._v("全部状态码")])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("状态码")]),t._v(" "),_("th",[t._v("标识")]),t._v(" "),_("th",[t._v("含义")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("200")]),t._v(" "),_("td",[t._v("OK")]),t._v(" "),_("td",[t._v("服务器成功处理并响应客户端的请求。")])]),t._v(" "),_("tr",[_("td",[t._v("204")]),t._v(" "),_("td",[t._v("No Content")]),t._v(" "),_("td",[t._v("请求已经成功处理，但是响应主体不返回内容")])]),t._v(" "),_("tr",[_("td",[t._v("206")]),t._v(" "),_("td",[t._v("Partial Content")]),t._v(" "),_("td",[t._v("服务端成功处理并返回客户端指定某资源的某部分")])]),t._v(" "),_("tr",[_("td",[t._v("301")]),t._v(" "),_("td",[t._v("Moved Permanently")]),t._v(" "),_("td",[t._v("请求的资源被永久移动到指定的 URL 上")])]),t._v(" "),_("tr",[_("td",[t._v("302")]),t._v(" "),_("td",[t._v("Found")]),t._v(" "),_("td",[t._v("请求的资源暂时移动到指定的 URL 上")])]),t._v(" "),_("tr",[_("td",[t._v("304")]),t._v(" "),_("td",[t._v("Not Modified")]),t._v(" "),_("td",[t._v("请求访问的资源未被修改，可以使用缓存的内容")])]),t._v(" "),_("tr",[_("td",[t._v("307")]),t._v(" "),_("td",[t._v("Temporary Redirect")]),t._v(" "),_("td",[t._v("请求的资源暂时被移动到指定的 URL 上")])]),t._v(" "),_("tr",[_("td",[t._v("400")]),t._v(" "),_("td",[t._v("Bad Request")]),t._v(" "),_("td",[t._v("客户端请求有语法错误(或请求参数错误)，不能被服务器所理解")])]),t._v(" "),_("tr",[_("td",[t._v("401")]),t._v(" "),_("td",[t._v("Unauthorized")]),t._v(" "),_("td",[t._v("请求未经授权")])]),t._v(" "),_("tr",[_("td",[t._v("403")]),t._v(" "),_("td",[t._v("Forbidden")]),t._v(" "),_("td",[t._v("服务器有能力处理该请求，但是拒绝授权访问")])]),t._v(" "),_("tr",[_("td",[t._v("404")]),t._v(" "),_("td",[t._v("Not Found")]),t._v(" "),_("td",[t._v("服务器无法找到所请求的资源")])]),t._v(" "),_("tr",[_("td",[t._v("500")]),t._v(" "),_("td",[t._v("Internal Server Error")]),t._v(" "),_("td",[t._v("服务器遇到不知道如何处理的情况")])]),t._v(" "),_("tr",[_("td",[t._v("502")]),t._v(" "),_("td",[t._v("Bad Gateway")]),t._v(" "),_("td",[t._v("网关(或代理服务器)向上游服务器发起请求时得到无效的响应")])]),t._v(" "),_("tr",[_("td",[t._v("503")]),t._v(" "),_("td",[t._v("Service Unavailable")]),t._v(" "),_("td",[t._v("服务端暂时处于超负载或正在进行停机维护，无法处理请求")])]),t._v(" "),_("tr",[_("td",[t._v("504")]),t._v(" "),_("td",[t._v("Gateway Timeout")]),t._v(" "),_("td",[t._v("网关/代理服务器请求上游服务器/辅助服务器时未能收到响应")])])])]),t._v(" "),_("h3",{attrs:{id:"http-请求报文和响应报文的组成"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-请求报文和响应报文的组成"}},[t._v("#")]),t._v(" HTTP 请求报文和响应报文的组成")]),t._v(" "),_("h3",{attrs:{id:"http-常见请求头的含义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-常见请求头的含义"}},[t._v("#")]),t._v(" HTTP 常见请求头的含义")]),t._v(" "),_("p",[t._v("参考 "),_("a",{attrs:{href:"/appendix/http-referrence/head-fields"}},[t._v("常见头部字段")])]),t._v(" "),_("h3",{attrs:{id:"http-的状态-优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-的状态-优缺点"}},[t._v("#")]),t._v(" HTTP 的状态 & 优缺点")]),t._v(" "),_("p",[_("code",[t._v("HTTP")]),t._v(" 是无状态的，它对发送过的请求和响应都不做持久化处理：")]),t._v(" "),_("ul",[_("li",[t._v("优点：减轻服务器负担")]),t._v(" "),_("li",[t._v("缺点：不能保存客户端的状态(验证登录等情况时)，但 "),_("code",[t._v("HTTP/1.1")]),t._v(" 引入了 "),_("code",[t._v("Cookie")]),t._v(" 技术来缓存状态")])]),t._v(" "),_("h3",{attrs:{id:"http-请求方式和区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-请求方式和区别"}},[t._v("#")]),t._v(" HTTP 请求方式和区别")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("GET")]),t._v("：用于获取资源。一般来说只用于数据的读取，而不用于会产生副作用的非幂等的操作中")]),t._v(" "),_("li",[_("strong",[t._v("HEAD")]),t._v("：用于获取响应头部。常用于查看服务器的性能")]),t._v(" "),_("li",[_("strong",[t._v("POST")]),t._v("：用于向指定资源提交数据，请求服务器进行处理。如表单数据提交、文件上传等，请求数据会被包含在请求体中；是非幂等的方法，因为这个请求可能会创建新的资源或修改现有资源")]),t._v(" "),_("li",[_("strong",[t._v("DELETE")]),t._v("：用于删除指定内容。")]),t._v(" "),_("li",[_("strong",[t._v("PUT")]),t._v("：用于更新现有资源。")]),t._v(" "),_("li",[_("strong",[t._v("PATCH")]),t._v("：用于资源的部分更新。当资源不存在时创建一个新的资源")]),t._v(" "),_("li",[_("strong",[t._v("OPTIONS")]),t._v("：用于查看服务器的性能。")]),t._v(" "),_("li",[_("strong",[t._v("TRACE")]),t._v("：回显服务器收到的请求。主要用于测试或诊断")]),t._v(" "),_("li",[_("strong",[t._v("CONNECT")]),t._v("：HTTP1.1预留给能够将连接改为管道方式的代理服务器。通常用于 SSL 加密服务器的链接与非加密的 HTTP代理服务器的通信")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("说明：")]),t._v(" "),_("ul",[_("li",[t._v("GET, POST, HEAD 都是 HTTP 1.0 的产物")]),t._v(" "),_("li",[t._v("JavaScript 使用 XMLHttpRequest 对象进行 CORS 跨域资源共享时，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限")])])]),t._v(" "),_("h3",{attrs:{id:"get-和-post-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的区别"}},[t._v("#")]),t._v(" GET 和 POST 的区别")]),t._v(" "),_("ul",[_("li",[t._v("GET 一般用于请求数据, POST 一般用于发送数据")]),t._v(" "),_("li",[t._v("GET 安全性底, POST 安全性较高")]),t._v(" "),_("li",[t._v("GET 传递参数大小有限制, POST 将请求参数放进请求体中, 大小没有限制")]),t._v(" "),_("li",[t._v("GET 一般会走缓存, POST 不走缓存")])]),t._v(" "),_("h3",{attrs:{id:"http-请求优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-请求优化"}},[t._v("#")]),t._v(" HTTP 请求优化")]),t._v(" "),_("ul",[_("li",[t._v("减少请求/连接\n"),_("ul",[_("li",[t._v("减少请求：优化数据请求，合并请求等")]),t._v(" "),_("li",[t._v('减少连接：保持一定的连接时间，而不是经历多次的 "三次握手"')])])]),t._v(" "),_("li",[t._v("缓存数据\n"),_("ul",[_("li",[t._v("客户端缓存在 localeStorage 中")]),t._v(" "),_("li",[t._v("服务端缓存静态资源在 CDN 服务器上")])])]),t._v(" "),_("li",[t._v("减少传输数据量：对文件进行压缩")]),t._v(" "),_("li",[t._v("优化网络链路\n"),_("ul",[_("li",[t._v("减少域名：减少三级或更高级域名的使用，减少域名解析的时间")]),t._v(" "),_("li",[t._v("使用 CDN")])])])]),t._v(" "),_("h3",{attrs:{id:"http-的缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-的缺点"}},[t._v("#")]),t._v(" HTTP 的缺点")]),t._v(" "),_("ul",[_("li",[t._v("通信使用明文：HTTP 协议本身不具有加密功能，无法对通信整体进行加密，所以采用明文方式发送")]),t._v(" "),_("li",[t._v("不验证通信方身份：HTTP 协议不具有判断对方身份的机制，容易造成很多安全问题：\n"),_("ul",[_("li",[t._v("客户端无法确认请求发送的服务器是否是目标服务器，有可能是已伪装的 Web 服务器")]),t._v(" "),_("li",[t._v("服务端无法确认接收响应的客户端是否是目标客户端，有可能是已伪装的 Web 客户端")]),t._v(" "),_("li",[t._v("即使是无意义的请求，服务器也会收到，例如 DDOS(Distributed denial of service，拒绝服务)攻击")])])]),t._v(" "),_("li",[t._v("无法证明报文的完整性：如果中间方篡改了信息，通信双方都没有方法来确认信息的准确性，容易遭受中间人攻击。但可以通过其他方法，如 "),_("code",[t._v("数字签名")]),t._v(" ，来保证信息的准确性。")])]),t._v(" "),_("h3",{attrs:{id:"https-加密原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-加密原理"}},[t._v("#")]),t._v(" HTTPS 加密原理")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("HTTP")]),t._v(" 的安全版本，通过 "),_("code",[t._v("SSL")]),t._v(" 加密")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("术语和技术：")]),t._v(" "),_("p",[_("strong",[t._v("对称加密 & 非对称加密:")])]),t._v(" "),_("ul",[_("li",[t._v("对称加密："),_("code",[t._v("AES")]),t._v("、"),_("code",[t._v("DES")]),t._v(" 等，加密解密使用同一个密钥")]),t._v(" "),_("li",[t._v("非对称加密："),_("code",[t._v("RSA")]),t._v(" 等，有一对密钥(公钥，私钥)，两个密钥都可以加解密，但用其中一个密钥加密就只有用另一个密钥才能解密")])]),t._v(" "),_("p",[_("strong",[t._v("摘要 & 签名:")])]),t._v(" "),_("ul",[_("li",[t._v("消息摘要：使用哈希函数(MD5, SHA 等)将数据生成唯一的定长的字符串，当数据改变时，使用同一哈希函数生成的摘要信息会不一样，从而验证数据的完整性")]),t._v(" "),_("li",[t._v("签名：为了防止消息摘要在中途被篡改，使用加密算法对消息摘要进行加密，只有拥有密钥才能解密")])]),t._v(" "),_("p",[_("strong",[t._v("SSL 数字证书:")])]),t._v(" "),_("ul",[_("li",[t._v("由 CA(认证中心)机构签发：CA 收到制作证书的请求后，会用非对称加密算法生成公钥和私钥，其中公钥保存在生成的 SSL 证书中，并用 CA 自身的私钥进行签名后，把 SSL 证书和对应的私钥返回给申请者")]),t._v(" "),_("li",[t._v("SSL 证书的作用：\n"),_("ul",[_("li",[t._v("身份认证，客户端可以认证服务端的身份")]),t._v(" "),_("li",[t._v("加密传递数据：利用 SSL 证书中的公钥加密数据(该数据应该是随机数生成的对称算法密钥)")])])])]),t._v(" "),_("p",[_("strong",[t._v("使用两种加密算法的原因:")])]),t._v(" "),_("ul",[_("li",[t._v("单独使用非对称加密算法：这样相当于不加密(因为服务端在之前把公钥返回给浏览器，任何人都可能知道公钥)")]),t._v(" "),_("li",[t._v("单独使用对称加密算法：服务端还要跟浏览器约定唯一密钥，保存密钥等工作")]),t._v(" "),_("li",[t._v("同时使用两者：非对称加密算法用于确保对称加密算法的密钥不被窃取，对称加密算法则用于加密数据；这样服务端就不用保留对称加密的密钥，而是通过公钥解密即可")])])]),t._v(" "),_("h3",{attrs:{id:"https-通信流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-通信流程"}},[t._v("#")]),t._v(" HTTPS 通信流程")]),t._v(" "),_("ol",[_("li",[t._v("浏览器将自己支持的加密算法发给服务端")]),t._v(" "),_("li",[t._v("服务端选择其中一组加密算法，将自己的 SSL 证书和公钥返回给浏览器")]),t._v(" "),_("li",[t._v("浏览器验证该证书的合法性")]),t._v(" "),_("li",[t._v("若证书合法(或用户接受了不受信任的证书)，浏览器会生成一串随机数密码，并用公钥进行加密后，发送至服务端")]),t._v(" "),_("li",[t._v("服务端接收浏览器的数据后：\n"),_("ul",[_("li",[t._v("用私钥解密出该随机数密码")]),t._v(" "),_("li",[t._v("用该随机数密码解密握手信息")]),t._v(" "),_("li",[t._v("用该随机数密码加密一段握手信息，发送至浏览器")])])]),t._v(" "),_("li",[t._v("之后的通信都使用该随机数密码作密钥进行加解密")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("说明：")]),t._v(" "),_("ul",[_("li",[t._v("使用了两种加密算法：对称加密、非对称加密")]),t._v(" "),_("li",[t._v("握手信息和数据是用对称加密的，密钥为浏览器生成的随机数密码")]),t._v(" "),_("li",[t._v("该随机数密码是用非对称加密的，公钥一开始和 SSL 证书一并发送给浏览器，服务端保存私钥")])])]),t._v(" "),_("h3",{attrs:{id:"开启-https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#开启-https"}},[t._v("#")]),t._v(" 开启 HTTPS")]),t._v(" "),_("h3",{attrs:{id:"劫持-https-请求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#劫持-https-请求"}},[t._v("#")]),t._v(" 劫持 HTTPS 请求")]),t._v(" "),_("p",[_("strong",[t._v("中间人攻击")]),t._v("：通过伪造证书，中间人截取客户端发送给服务器的请求，伪装成客户端与服务器进行通信，并将信息转发给客户端，伪装成服务器与客户端进行通信。此时中间人可以获取客户端与服务端的所有通信内容。")]),t._v(" "),_("p",[_("strong",[t._v("预防")]),t._v("：证书校验。针对安全性比较高的应用，可以采用客户端预埋证书的方式锁死证书，只有当客户端证书与服务端证书完全一致的情况下才允许通信，而且证书过期必须强制更新。")]),t._v(" "),_("h3",{attrs:{id:"http-1-0-1-1-2-0-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0-1-1-2-0-的区别"}},[t._v("#")]),t._v(" HTTP 1.0/1.1/2.0 的区别")]),t._v(" "),_("p",[_("strong",[t._v("HTTP 1.0/1.1")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("长连接")]),t._v("："),_("code",[t._v("HTTP 1.0")]),t._v(" 需要使用 "),_("code",[t._v("keep-alive")]),t._v(" 参数来告知服务器建立一个长连接，而 "),_("code",[t._v("HTTP 1.1")]),t._v(" 默认支持长连接")]),t._v(" "),_("li",[_("strong",[t._v("节约宽带")]),t._v("："),_("code",[t._v("HTTP 1.1")]),t._v(" 支持只发送一个 "),_("code",[t._v("header")]),t._v(" 信息（不带任何 "),_("code",[t._v("body")]),t._v(" 信息）")]),t._v(" "),_("li",[_("strong",[_("code",[t._v("host")]),t._v(" 域")]),t._v("：设置虚拟站点，"),_("code",[t._v("web server")]),t._v(" 上的多个虚拟站点可以共享同一个 "),_("code",[t._v("ip")]),t._v(" 端口，"),_("code",[t._v("HTTP 1.0")]),t._v(" 没有 "),_("code",[t._v("host")]),t._v(" 域")])]),t._v(" "),_("p",[_("strong",[t._v("HTTP 2.0：")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("多路复用")]),t._v("："),_("code",[t._v("HTTP 1.1")]),t._v(" 为了避免浏览器过度消耗服务器资源，限制了浏览器对同一域名的并发请求数量；而 "),_("code",[t._v("HTTP 2.0")]),t._v(" 不会")]),t._v(" "),_("li",[_("strong",[t._v("数据压缩")]),t._v("：启用了强制性的压缩算法来压缩报文")]),t._v(" "),_("li",[_("strong",[t._v("支持 "),_("code",[t._v("TLS")])]),t._v("：允许使用 "),_("code",[t._v("TLS 1.2")]),t._v(" 或更新版本的协议进行加密，使通信更加安全")]),t._v(" "),_("li",[_("strong",[t._v("应用层协议协商")])]),t._v(" "),_("li",[_("strong",[t._v("服务端推送")]),t._v("：服务端可以自行判断客户端的请求，选择返回比当前请求更多的数据")]),t._v(" "),_("li",[_("strong",[t._v("流控制")]),t._v("：阻止发送方发送过量的数据，以免超出接收方的处理能力")])]),t._v(" "),_("h2",{attrs:{id:"websocket"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" WebSocket")]),t._v(" "),_("h3",{attrs:{id:"理解-websocket-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#理解-websocket-协议"}},[t._v("#")]),t._v(" 理解 WebSocket 协议")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("WebSocket")]),t._v(" 在 "),_("code",[t._v("HTML5")]),t._v(" 中引入，与 "),_("code",[t._v("HTTP")]),t._v(" 协议一样都是建立在 "),_("code",[t._v("TCP")]),t._v(" 协议之上的应用层协议，都属于可靠协议")]),t._v(" "),_("li",[_("code",[t._v("WebSocket")]),t._v(" 连接时需要使用 "),_("code",[t._v("HTTP")]),t._v(" 协议通信")]),t._v(" "),_("li",[_("code",[t._v("WebSocket")]),t._v(" 只需要完成一次握手就能创建持久性连接("),_("code",[t._v("HTTP")]),t._v(" 需要三次握手)；它也是有状态的("),_("code",[t._v("HTTP")]),t._v(" 是无状态的)，不用再每次发送报文都提供报文信息")]),t._v(" "),_("li",[_("code",[t._v("WebSocket")]),t._v(" 允许双工通信，不仅客户端能向服务端发送消息，而且服务端也能主动向客户端发送消息")])]),t._v(" "),_("h3",{attrs:{id:"浏览器使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器使用"}},[t._v("#")]),t._v(" 浏览器使用")]),t._v(" "),_("p",[_("strong",[t._v("使用全局构造函数：")])]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ws "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSocket")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" protocols"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),_("p",[_("strong",[t._v("参数：")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("url: String")]),t._v(": 请求 url 地址")]),t._v(" "),_("li",[_("code",[t._v("protocols='': Array")]),t._v(": 单个协议名称或包含多个协议的数组")])]),t._v(" "),_("p",[t._v("更多实例属性和方法 "),_("a",{attrs:{href:"/base/html/html5/websocket"}},[t._v("HTML5 WebSocket")])]),t._v(" "),_("h3",{attrs:{id:"服务端使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务端使用"}},[t._v("#")]),t._v(" 服务端使用")]),t._v(" "),_("p",[_("strong",[t._v("Node.js 中使用第三方模块 "),_("code",[t._v("ws")]),t._v("：")])]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" WebSocket "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ws'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" http "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ws'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两种方式创建 WebSocket 实例")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.传入一个对象")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" wsServer "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSocket"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Server")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" port"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.传入一个 http 实例")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" httpServer "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("https"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("createServer")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" wsServer "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSocket"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Server")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" server"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" httpServer "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),_("h3",{attrs:{id:"在客户端和服务端通信"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#在客户端和服务端通信"}},[t._v("#")]),t._v(" 在客户端和服务端通信")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 客户端")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ws "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSocket")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ws://localhost:1234'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Try to connect WebSocket Server...'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nws"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'open'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Connect Success!'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  ws"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Client: Hi, WebSocket!'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nws"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 服务端")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" WebSocket "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ws'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" wss "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSocket"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Server")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" port"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nwss"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'connection'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("ws")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Server connection success!'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  ws"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("message")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'received: %s'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" message"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    ws"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    ws"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Server: Hello, I\\'m WebSocket!'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),_("h2",{attrs:{id:"url"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#url"}},[t._v("#")]),t._v(" URL")]),t._v(" "),_("h3",{attrs:{id:"认识-url"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#认识-url"}},[t._v("#")]),t._v(" 认识 URL")]),t._v(" "),_("p",[_("strong",[t._v("URL 地址：")])]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("https://www.zwlike.top:3000/blog/index.html?tag=note&limit=10#/main\n")])])]),_("p",[_("strong",[t._v("分析：")])]),t._v(" "),_("ul",[_("li",[t._v("协议（protocol）："),_("code",[t._v("http")]),t._v(", "),_("code",[t._v("https")]),t._v(", "),_("code",[t._v("ftp")]),t._v(" 等")]),t._v(" "),_("li",[t._v("主机名（hostname）：域名("),_("code",[t._v("www.zwlike.top")]),t._v(")或 "),_("code",[t._v("IP")]),t._v(" 地址")]),t._v(" "),_("li",[t._v("端口（port）："),_("code",[t._v("3000")]),t._v("，在服务器地址和一个 "),_("code",[t._v(":")]),t._v(" 标识后的数字(没有则使用默认端口)")]),t._v(" "),_("li",[t._v("请求路径（path）："),_("code",[t._v("/blog/index.html")]),t._v("，指示服务器下的文件相对路径")]),t._v(" "),_("li",[t._v("请求参数（query）："),_("code",[t._v("tag=note&limit=10")]),t._v("，以 "),_("code",[t._v("?")]),t._v(" 标识开始，且以 "),_("code",[t._v("key=value")]),t._v(" 形式的单组或多组(用 "),_("code",[t._v("&")]),t._v(" 分隔)的查询参数")]),t._v(" "),_("li",[t._v("片段标识符（hash）："),_("code",[t._v("#/main")]),t._v("，用 "),_("code",[t._v("<a>")]),t._v(" 标签作锚点的跳转定位页面位置或 HTML5 的单页应用劫持跳转使请求路径和参数发生的变化")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("说明：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("HTTP")]),t._v(" 默认端口为 "),_("code",[t._v("80")]),t._v("，"),_("code",[t._v("HTTPS")]),t._v(" 默认端口为 "),_("code",[t._v("443")])])])]),t._v(" "),_("h2",{attrs:{id:"cdn"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cdn"}},[t._v("#")]),t._v(" CDN")]),t._v(" "),_("h3",{attrs:{id:"cdn-的作用和原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cdn-的作用和原理"}},[t._v("#")]),t._v(" CDN 的作用和原理")]),t._v(" "),_("p",[_("strong",[t._v("CDN")]),t._v("：内容分发网络。尽可能的避开互联网有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快更稳定。")]),t._v(" "),_("p",[_("strong",[t._v("原理")]),t._v("：")]),t._v(" "),_("ul",[_("li",[t._v("广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对的地区或者网络中")]),t._v(" "),_("li",[t._v("将用户的访问指向距离最近的缓存服务器，由缓存服务器直接响应用户的请求")])]),t._v(" "),_("h2",{attrs:{id:"cookie"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[t._v("#")]),t._v(" Cookie")]),t._v(" "),_("p",[t._v("  由于 "),_("code",[t._v("HTTP")]),t._v(" 是无状态的，不能保存客户端的状态(验证登录等情况时)，因此 "),_("code",[t._v("HTTP/1.1")]),t._v(" 引入了 "),_("code",[t._v("Cookie")]),t._v(" 技术来缓存状态。")]),t._v(" "),_("h3",{attrs:{id:"分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),_("ul",[_("li",[t._v("持久化 "),_("code",[t._v("Cookie")]),t._v(": 保存在硬盘中，由一个过期时间(或被用户手动清理)")]),t._v(" "),_("li",[t._v("非持久化 "),_("code",[t._v("Cookie")]),t._v(": 保存在内存中，相当于临时缓存，在浏览器关闭后消失")])]),t._v(" "),_("h3",{attrs:{id:"使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),_("ul",[_("li",[t._v("请求报文的 "),_("code",[t._v("Cookie")]),t._v(" 字段: "),_("code",[t._v("Cookie")])]),t._v(" "),_("li",[t._v("响应报文的 "),_("code",[t._v("Cookie")]),t._v(" 字段: "),_("code",[t._v("set-Cookie")]),t._v("，可以使用多个该字段，并且可以使用以下几个附加属性("),_("code",[t._v("键=值")]),t._v(" 的形式，多个属性间用 "),_("code",[t._v(";")]),t._v(" 分隔):\n"),_("ul",[_("li",[_("code",[t._v("expires")]),t._v(": 指定数据的有效期，否则默认在浏览器关闭后消失；而且当 "),_("code",[t._v("Cookie")]),t._v(" 从浏览器发出后就无法直接删除，只能覆盖")]),t._v(" "),_("li",[_("code",[t._v("path")]),t._v(": 指定 "),_("code",[t._v("Cookie")]),t._v(" 发送范围的路径，默认为根路径")]),t._v(" "),_("li",[_("code",[t._v("domain")]),t._v(": 指定 "),_("code",[t._v("Cookie")]),t._v(" 适用的域名，匹配规则为结尾匹配")]),t._v(" "),_("li",[_("code",[t._v("secure")]),t._v(": 指定 "),_("code",[t._v("Cookie")]),t._v(" 只能在 HTTPS 安全连接中使用，默认可在 HTTP/HTTPS 中使用")]),t._v(" "),_("li",[_("code",[t._v("HttpOnly")]),t._v(": 指定浏览器端的 Javascript 脚本无法获取 "),_("code",[t._v("Cookie")]),t._v(" 内容(从而无法轻易修改或删除)，常用于防止跨站脚本(XSS)对 "),_("code",[t._v("Cookie")]),t._v(" 信息的窃取")])])])]),t._v(" "),_("h3",{attrs:{id:"缺陷"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缺陷"}},[t._v("#")]),t._v(" 缺陷")]),t._v(" "),_("ul",[_("li",[t._v("大小受限，浏览器限制为 4KB 左右")]),t._v(" "),_("li",[t._v("消耗网络带宽")]),t._v(" "),_("li",[t._v("可以被客户端禁用的")]),t._v(" "),_("li",[t._v("可能会被窃取或篡改")]),t._v(" "),_("li",[t._v("场景受限，有些端不支持 "),_("code",[t._v("Cookie")]),t._v("(微信小程序)")])]),t._v(" "),_("h3",{attrs:{id:"对比其他存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对比其他存储"}},[t._v("#")]),t._v(" 对比其他存储")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("存储方式")]),t._v(" "),_("th",[t._v("说明")]),t._v(" "),_("th",[t._v("容量")]),t._v(" "),_("th",[t._v("特点")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Cookie")]),t._v(" "),_("td",[t._v("服务端设置，分为持久化 Cookie和非持久化 Cookie")]),t._v(" "),_("td",[t._v("4KB 左右")]),t._v(" "),_("td",[t._v("容量小，可被禁用，可能被窃取或篡改，在同源窗口中共享的")])]),t._v(" "),_("tr",[_("td",[t._v("Session Storage")]),t._v(" "),_("td",[t._v("浏览器全局对象，非持久化存储")]),t._v(" "),_("td",[t._v("5MB")]),t._v(" "),_("td",[t._v("只能存储简单数据(复杂数据只能 json 化)，页面关闭后清除，不同域之间不共享")])]),t._v(" "),_("tr",[_("td",[t._v("Locale Storage")]),t._v(" "),_("td",[t._v("浏览器全局对象，持久化存储")]),t._v(" "),_("td",[t._v("5MB")]),t._v(" "),_("td",[t._v("只能存储简单数据(复杂数据只能 json 化)，不会消失，除非手动清除，在同源窗口中共享的")])]),t._v(" "),_("tr",[_("td",[t._v("Indexed DB")]),t._v(" "),_("td",[t._v("浏览器非关系型数据库(NoSQL)")]),t._v(" "),_("td",[t._v("-")]),t._v(" "),_("td",[t._v("直接将数据存储在浏览器端的数据库中")])])])]),t._v(" "),_("h3",{attrs:{id:"cookie-与状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cookie-与状态"}},[t._v("#")]),t._v(" Cookie 与状态")]),t._v(" "),_("p",[t._v("  在 "),_("code",[t._v("Cookie")]),t._v(" 的使用场景中，最重要的是授权认证。授权认证的常用方式有两种：基于 "),_("code",[t._v("Cookie")]),t._v("、基于 "),_("code",[t._v("Token")]),t._v("，他们的实现有所不同，但步骤大致相同。")]),t._v(" "),_("p",[_("strong",[t._v("授权认证的步骤：")])]),t._v(" "),_("ul",[_("li",[t._v("保存登录状态信息：浏览器发送 "),_("code",[t._v("POST")]),t._v(" 请求提交登录信息 --\x3e 服务端响应信息、验证通过并返回一个状态值来保存登录状态")]),t._v(" "),_("li",[t._v("提取登陆状态信息：登录完成后 --\x3e 浏览器发送请求，服务端总能获取浏览器的登录状态，从而正确响应页面")])]),t._v(" "),_("p",[_("strong",[t._v("授权认证的方式：")])]),t._v(" "),_("ul",[_("li",[t._v("基于 "),_("code",[t._v("Cookie")]),t._v(" "),_("ol",[_("li",[t._v("服务端收到浏览器请求后，创建一个 "),_("code",[t._v("Session")]),t._v(" 会话，保存在服务端的内存或数据库中")]),t._v(" "),_("li",[t._v("接着生成一个随机的、唯一的 id，用来和会话信息进行映射并写入 "),_("code",[t._v("Cookie")]),t._v("，该 "),_("code",[t._v("Cookie")]),t._v(" 通常带 "),_("code",[t._v("HttpOnly")]),t._v(" 属性")])])]),t._v(" "),_("li",[t._v("基于 "),_("code",[t._v("Token")]),t._v(" "),_("ol",[_("li",[t._v("服务端收到浏览器请求后，对用户信息进行编码(生成一串较长的字符串)")]),t._v(" "),_("li",[t._v("将该字符串作为 "),_("code",[t._v("Token")]),t._v(" 字段的属性值，返回给浏览器")])])])]),t._v(" "),_("p",[_("strong",[t._v("两种认证方式的主要区别：")])]),t._v(" "),_("ul",[_("li",[t._v("基于 "),_("code",[t._v("Cookie")]),t._v("：有状态。获取状态时，服务端要获取请求头部的 "),_("code",[t._v("Cookie")]),t._v(" 字段的 "),_("code",[t._v("Session")]),t._v(" 属性值，再找到之前保存在服务端的会话信息进行校验；这种方式需要客户端和服务端都保存信息")]),t._v(" "),_("li",[t._v("基于 "),_("code",[t._v("Token")]),t._v("：无状态。获取状态时，直接利用密钥信息对 "),_("code",[t._v("Token")]),t._v(" 进行解密和校验；这种方式下服务端不用保存信息，能够减轻服务端的压力，也可用于不支持 "),_("code",[t._v("Cookie")]),t._v(" 的情况(微信小程序)")])]),t._v(" "),_("p",[_("strong",[t._v("基于 Token 的优点：")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("无状态")]),t._v(": 服务端不用保存状态信息，减轻服务端压力")]),t._v(" "),_("li",[_("strong",[t._v("域无关")]),t._v(": "),_("code",[t._v("Cookie")]),t._v(" 与域有关，"),_("code",[t._v("Token")]),t._v(" 与域无关")]),t._v(" "),_("li",[_("strong",[t._v("性能好")]),t._v(": 请求头部会自动带上 "),_("code",[t._v("Cookie")]),t._v("，占用带宽，而 "),_("code",[t._v("Token")]),t._v(" 则可以按需添加；另外服务端收到 "),_("code",[t._v("Cookie")]),t._v(" 后可能要在数据库中查询认证，而 "),_("code",[t._v("Token")]),t._v(" 则直接解密认证")]),t._v(" "),_("li",[_("strong",[t._v("通用性强")]),t._v(": 很多设备(或小程序等应用)不支持 "),_("code",[t._v("Cookie")]),t._v("，而且 "),_("code",[t._v("Cookie")]),t._v(" 可以被用户禁用，因此 "),_("code",[t._v("Token")]),t._v(" 通用性更好")])]),t._v(" "),_("p",[_("strong",[t._v("创建 Token 的方式：")])]),t._v(" "),_("p",[t._v("使用最多的是 "),_("code",[t._v("JSON Web Token")]),t._v("，简称 "),_("code",[t._v("JWT")]),t._v("。该方式生成的 "),_("code",[t._v("Token")]),t._v(" 分为三个部分(通过 "),_("code",[t._v(".")]),t._v(" 分割)：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("Header")]),t._v(": 头部。由算法和 "),_("code",[t._v("Token")]),t._v(" 类型组成，属性名使用简写: "),_("code",[t._v('{ "alg": "HS256", "typ": "JWT" }')])]),t._v(" "),_("li",[_("code",[t._v("Payload")]),t._v(": 负载。")]),t._v(" "),_("li",[_("code",[t._v("Signature")]),t._v(": 签名。")])]),t._v(" "),_("h2",{attrs:{id:"理解和区别-token-cookie-session"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#理解和区别-token-cookie-session"}},[t._v("#")]),t._v(" 理解和区别 Token/Cookie/Session")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("Cookie")]),t._v("：\n"),_("ul",[_("li",[t._v("浏览器里面能永久存储的一种数据，由服务器生成，发送给浏览器")]),t._v(" "),_("li",[t._v("浏览器把 "),_("code",[t._v("Cookie")]),t._v(" 以 "),_("code",[t._v("k-v")]),t._v(" 形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该 "),_("code",[t._v("Cookie")]),t._v(" 发送给服务器")]),t._v(" "),_("li",[t._v("浏览器加入了一些限制确保 "),_("code",[t._v("Cookie")]),t._v(" 不会被恶意使用，同时每个域的 "),_("code",[t._v("Cookie")]),t._v(" 数量是有限的")])])]),t._v(" "),_("li",[_("code",[t._v("Session")]),t._v("：\n"),_("ul",[_("li",[t._v("会话，服务器给客户端分配的不同的身份标识，客户端每次向服务器发请求的时候都带上这个身份标识")]),t._v(" "),_("li",[t._v("在基于 "),_("code",[t._v("Session")]),t._v(" 的身份验证中，服务器将在用户登录后为用户创建一个 "),_("code",[t._v("Session")]),t._v("。然后，"),_("code",[t._v("Session ID")]),t._v(" 会被存储在用户浏览器的 "),_("code",[t._v("Cookie")]),t._v(" 中。当用户保持登录状态时，"),_("code",[t._v("Cookie")]),t._v(" 将与每个后续请求一起被发送出去。然后，服务器可以将存储在 "),_("code",[t._v("Cookie")]),t._v(" 上的 "),_("code",[t._v("Session ID")]),t._v(" 与存储在内存中或者数据库中的 "),_("code",[t._v("Session")]),t._v(" 信息进行比较，以验证用户的身份，返回给用户客户端响应信息的时候会附带用户当前的状态")]),t._v(" "),_("li",[t._v("客户端有多种方式保存这个身份标识，浏览器端一般采用 "),_("code",[t._v("Cookie")]),t._v(" 的方式")]),t._v(" "),_("li",[t._v("服务器使用 "),_("code",[t._v("Session")]),t._v(" 把用户的信息临时保存在服务器上，用户离开网站后 "),_("code",[t._v("Session")]),t._v(" 会被销毁，这种用户信息存储方式相对 "),_("code",[t._v("Cookie")]),t._v(" 来说更安全，但是有一个缺陷：如果 Web 服务器做了负载均衡，那么下一个操作请求到另一台服务器的时候"),_("code",[t._v("Session")]),t._v(" 会丢失")])])]),t._v(" "),_("li",[_("code",[t._v("Token")]),t._v("：\n"),_("ul",[_("li",[t._v("无状态：基于 "),_("code",[t._v("Token")]),t._v(" 的身份验证是无状态的，不将用户信息存在服务器或 "),_("code",[t._v("Session")])]),t._v(" "),_("li",[t._v("安全性："),_("code",[t._v("Token")]),t._v(" 是有时效的，一段时间之后用户需要重新验证，也可以手动撤回 "),_("code",[t._v("Token")])]),t._v(" "),_("li",[t._v("可扩展性："),_("code",[t._v("Token")]),t._v(" 能够创建与其它程序共享权限的程序")]),t._v(" "),_("li",[t._v("多平台跨域：只要用户有一个通过了验证的 "),_("code",[t._v("Token")]),t._v("，数据和资源就能够在任何域上被请求到")]),t._v(" "),_("li",[t._v("基于标准：创建 "),_("code",[t._v("Token")]),t._v(" 的时候，可以设定一些选项")])])])]),t._v(" "),_("h2",{attrs:{id:"服务端-api"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务端-api"}},[t._v("#")]),t._v(" 服务端 API")]),t._v(" "),_("p",[t._v("  服务端 "),_("code",[t._v("API")]),t._v("(Application Programming Interface，应用程序编程接口)，在程序内部指的是各个模块、函数、类的调用参数和返回值，在程序外部指不同程序之间的调用参数和返回结果。在 Web 中指的是前后端通信的接口，一般借助 HTTP(S) 协议来实现。")]),t._v(" "),_("p",[t._v("  当前流行的 Web API 设计规范为 "),_("code",[t._v("REST API")]),t._v(" 和 "),_("code",[t._v("GraphQL")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"rest-api"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rest-api"}},[t._v("#")]),t._v(" REST API")]),t._v(" "),_("p",[t._v("  简称 "),_("code",[t._v("REST")]),t._v("(Representation State Transfer，表现层状态转换)，指的是一种设计风格(不是标准)。")]),t._v(" "),_("p",[_("strong",[t._v("特点：")])]),t._v(" "),_("ul",[_("li",[t._v("所有通信都是无状态的，状态统一由客户端进行维护，减轻了服务端的压力")]),t._v(" "),_("li",[t._v("可以利用缓存来提升通信效率")]),t._v(" "),_("li",[t._v("可结合一些 HTTP 协议的特点：用 URL 的方式指向不同的资源")])]),t._v(" "),_("p",[_("strong",[t._v("定制团队规范：")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("请求路径")]),t._v(" "),_("ul",[_("li",[t._v("所有请求路径对应特点的资源，不要包含动词、形容词等修饰符，必要时应该使用复数")]),t._v(" "),_("li",[t._v("多个单词组合使用 "),_("code",[t._v("songList")]),t._v(", "),_("code",[t._v("song_list")]),t._v(", "),_("code",[t._v("song-list")]),t._v(" 三者之一")]),t._v(" "),_("li",[t._v("合适的资源嵌套层级，使用 id 占位符("),_("code",[t._v(":id")]),t._v(")标识资源")]),t._v(" "),_("li",[t._v("用参数对资源进行过滤而不是使用无规则的 URL，参数之间用 "),_("code",[t._v("&")]),t._v(" 分开，多个参数值用 "),_("code",[t._v(",")]),t._v(" 分开")])])]),t._v(" "),_("li",[_("strong",[t._v("请求头部")]),t._v(": 不同的操作使用对应语义的请求方法\n"),_("ul",[_("li",[_("code",[t._v("GET")]),t._v(": 获取资源，常用于查询")]),t._v(" "),_("li",[_("code",[t._v("POST")]),t._v(": 创建资源，或数据提交(用户登录等)")]),t._v(" "),_("li",[_("code",[t._v("PUT")]),t._v(": 修改资源")]),t._v(" "),_("li",[_("code",[t._v("DELETE")]),t._v(": 删除资源")])])]),t._v(" "),_("li",[_("strong",[t._v("请求体")]),t._v(": 一般采用 JSON 格式提交数据(文件上传除外)")]),t._v(" "),_("li",[_("strong",[t._v("响应头部")]),t._v(": 遵循 HTTP(S) 规范的状态码和状态信息描述请求结果")]),t._v(" "),_("li",[_("strong",[t._v("响应体")]),t._v(" "),_("ul",[_("li",[t._v("一般响应为 JSON 格式")]),t._v(" "),_("li",[t._v("响应结果处理: 包括响应描述和响应分页")])])])]),t._v(" "),_("p",[_("strong",[t._v("工具：")])]),t._v(" "),_("ul",[_("li",[t._v("Swagger")])]),t._v(" "),_("h3",{attrs:{id:"graphql"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#graphql"}},[t._v("#")]),t._v(" GraphQL")]),t._v(" "),_("p",[t._v("  简称 "),_("code",[t._v("GraphQL")]),t._v("(Graph Query Language，图表化查询语言)，由 "),_("code",[t._v("Facebook")]),t._v(" 推出。")]),t._v(" "),_("p",[_("strong",[t._v("特点：")])]),t._v(" "),_("ul",[_("li",[t._v("它使用模式(Schema)来描述一类数据的结构，类似 mongoose 的形式")]),t._v(" "),_("li",[t._v("所有请求都使用 POST 方法，同时将 Schema 作为请求参数放入请求体中")])]),t._v(" "),_("p",[_("strong",[t._v("设计：")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("类型")]),t._v(": 返回后端定义的类型")]),t._v(" "),_("li",[_("strong",[t._v("验证")]),t._v(": 后端对于不符合要求的 GraphQL 请求会给出明确的错误提示")]),t._v(" "),_("li",[_("strong",[t._v("内省")]),t._v(": 告诉调用者当前服务器指出哪些查询")]),t._v(" "),_("li",[_("strong",[t._v("查询与变更")]),t._v(": 查询操作以 "),_("code",[t._v("query")]),t._v(" 开头，变更操作以 "),_("code",[t._v("mutation")]),t._v(" 开头")])]),t._v(" "),_("p",[_("strong",[t._v("工具：")])]),t._v(" "),_("ul",[_("li",[t._v("GraphiQL")]),t._v(" "),_("li",[t._v("GraphQL Voyager")])])])}),[],!1,null,null,null);v.default=e.exports}}]);