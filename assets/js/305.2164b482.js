(window.webpackJsonp=window.webpackJsonp||[]).push([[305],{730:function(e,l,t){"use strict";t.r(l);var o=t(25),n=Object(o.a)({},(function(){var e=this.$createElement,l=this._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[l("h2",{attrs:{id:"mvc-mvvm-mvvc"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#mvc-mvvm-mvvc"}},[this._v("#")]),this._v(" MVC / MVVM / MVVC")]),this._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[this._v("MVC: (Model-View-Controller)，Controller 可以直接访问 Model 或直接控制 View; 但是 Model 和 View 不能通信\n  + Model: 数据层，负责存储数据\n  + View: 展现层，用户所看到的页面\n  + Controler: 协调层，协调 Model 和 View，根据用户在 View 上的动作在 Model 上作出对应的更改，同时将更改的信息返回到 View 上\n\nMVVM: (Model-View-ViewModel)，ViewModel 相当于把原来 ViewController 层的业务逻辑和页面逻辑等剥离\n  + Model: 数据层，负责存储数据\n  + View: ViewController 层，负责从 ViewModel 层获取数据，然后显示\n  + ViewModel: 前两层的粘合剂，封装业务逻辑处理、网络处理、数据缓存\n\nMVVC: (Model-View-View-Controller)\n  + Model: 数据层，负责存储数据\n  + View: 展现层，创建需求创建 cell\n  + View: 定义数组，用来接收控制中的数据。处理回调（比如:刷新回调、点击cell回调、加载更多回调、动态视图高度回调等）\n  + Controler: 加载网络数据懒加载\n")])])])])}),[],!1,null,null,null);l.default=n.exports}}]);