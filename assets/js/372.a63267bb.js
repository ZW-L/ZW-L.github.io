(window.webpackJsonp=window.webpackJsonp||[]).push([[372],{802:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://nodejs.cn/api/cluster.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("cluster"),a("OutboundLink")],1),t._v("模块可以创建共享服务器端口的子进程")]),t._v(" "),a("li",[t._v("单个 Node.js 实例运行在单个线程中，为了充分利用多核系统，有时需要启用一组 Node.js 进程去处理负载任务")]),t._v(" "),a("li",[t._v("工作进程由 "),a("code",[t._v("child_process.fork()")]),t._v(" 方法创建，它们可以使用 IPC 和父进程通信，使各进程交替处理连接服务")]),t._v(" "),a("li",[t._v("虽然 cluster 模块主要用于网络相关的情况，但同样可以用于其他需要工作进程的情况")]),t._v(" "),a("li",[t._v("Node.js 不支持路由逻辑，因此在设计应用时，不应该过分依赖内存数据对象，例如 session 和登陆等")])]),t._v(" "),a("h2",{attrs:{id:"原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),a("p",[a("strong",[t._v("cluster 模块支持两种分发连接")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("循环法：由主进程负责监听端口，接收新连接后再将连接循环分发给工作进程，在分发中使用了一些内置技巧防止工作进程任务过载(除 Windows 外所有平台的默认方法)")]),t._v(" "),a("li",[t._v("主进程创建监听 socket 后发送给感兴趣的工作进程，由工作进程负责直接接收连接")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("备注：")]),t._v(" "),a("p",[t._v("理论上方法2 效率最佳，但实际情况下由于操作系统调度机制难以捉摸，会使分发变得不稳定，可能会出现八个进程中有两个分担了 70% 的负载")])]),t._v(" "),a("p",[a("strong",[t._v("server.listen() 将大部分工作交给主进程完成，导致普通 Node.js 进程与 cluster 工作进程可能有三种差异")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("server.listen({fd: 7}) 因为消息会被传给主进程，所以父进程中的文件描述符 7 将会被监听并将句柄传给工作进程，而不是监听文件描述符 7 指向的工作进程")]),t._v(" "),a("li",[t._v("server.listen(handle) 显式地监听句柄，会导致工作进程直接使用该句柄，而不是和主进程通信")]),t._v(" "),a("li",[t._v("server.listen(0) 正常情况下，这种调用会导致 server 在随机端口上监听。但在 cluster 模式中，所有工作进程每次调用 listen(0) 时会收到相同的“随机”端口。实质上，这种端口只在第一次分配时随机，之后就变得可预料。 如果要使用独立端口的话，应该根据工作进程的 ID 来生成端口号")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("备注：")]),t._v(" "),a("ul",[a("li",[t._v("由于各工作进程是独立的进程，它们可以根据需要随时关闭或重新生成，而不影响其他进程的正常运行")]),t._v(" "),a("li",[t._v("只要有存活的工作进程，服务器就可以继续处理连接")]),t._v(" "),a("li",[t._v("如果没有存活的工作进程，现有连接会丢失，新的连接也会被拒绝")]),t._v(" "),a("li",[t._v("Node.js 不会自动管理工作进程的数量，而应该由具体的应用根据实际需要来管理进程池")])])]),t._v(" "),a("h2",{attrs:{id:"事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),a("h3",{attrs:{id:"disconnect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disconnect"}},[t._v("#")]),t._v(" disconnect")]),t._v(" "),a("ul",[a("li",[t._v("在工作进程的 IPC 管道被断开后触发")]),t._v(" "),a("li",[t._v("可能导致事件触发的原因：工作进程优雅地退出、被杀死、手动断开连接(调用 "),a("code",[t._v("worker.disconnect()")]),t._v(")")]),t._v(" "),a("li",[a("code",[t._v("disconnect")]),t._v(" 和 "),a("code",[t._v("exit")]),t._v(" 事件之间可能存在延迟，它们可以用来检测进程是否在清理过程中被卡住，或是否存在长时间运行的连接")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("cluster"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'disconnect'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("worker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("工作进程 #")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("worker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(" 已断开连接")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"exit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exit"}},[t._v("#")]),t._v(" exit")]),t._v(" "),a("ul",[a("li",[t._v("任何一个工作进程关闭时触发")]),t._v(" "),a("li",[t._v("可以用于重启工作进程(再次调用 "),a("code",[t._v("cluster.fork()")]),t._v(")")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("cluster"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'exit'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("worker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'工作进程 %d 关闭 (%s). 重启中...'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" worker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" signal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  cluster"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"fork"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fork"}},[t._v("#")]),t._v(" fork")]),t._v(" "),a("ul",[a("li",[t._v("新的工作进程被衍生时触发")]),t._v(" "),a("li",[t._v("可以用来记录工作进程活动，并产生一个自定义的超时")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" timeouts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("errorMsg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'连接出错'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ncluster"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fork'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("worker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  timeouts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("worker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errorMsg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ncluster"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'listening'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("worker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clearTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timeouts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("worker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ncluster"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'exit'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("worker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clearTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timeouts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("worker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("errorMsg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"listening"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#listening"}},[t._v("#")]),t._v(" listening")]),t._v(" "),a("ul",[a("li",[t._v("当一个工作进程调用 listen() 后，工作进程上的 server 会触发 'listening' 事件，同时主进程上的 cluster 也会触发 'listening' 事件")]),t._v(" "),a("li",[t._v("事件句柄使用两个参数来执行，其中 worker 包含了工作进程对象， address 包含了以下的连接属性：address、 port 和 addressType。 当工作进程同时监听多个地址时，这些参数非常有用")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("cluster"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'listening'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("worker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("工作进程已连接到 ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("address"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("addressType 可选值：")]),t._v(" "),a("ul",[a("li",[t._v("4：TCPv4")]),t._v(" "),a("li",[t._v("6：TCPv6")]),t._v(" "),a("li",[t._v("-1：Unix 域 socket")]),t._v(" "),a("li",[a("code",[t._v("udp4")]),t._v("/"),a("code",[t._v("udp6")]),t._v(" (UDP v4/v6)")])])]),t._v(" "),a("h3",{attrs:{id:"message"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#message"}},[t._v("#")]),t._v(" message")]),t._v(" "),a("ul",[a("li",[t._v("当集群主进程从任何工作进程接收到消息时触发")])]),t._v(" "),a("h3",{attrs:{id:"online"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#online"}},[t._v("#")]),t._v(" online")]),t._v(" "),a("ul",[a("li",[t._v("当衍生一个新的工作进程后，工作进程应当响应一个上线消息。 当主进程收到上线消息后将会触发此事件")]),t._v(" "),a("li",[t._v("'fork' 事件和 'online' 事件的区别在于，当主进程衍生工作进程时触发 'fork'，当工作进程运行时触发 'online'")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("cluster"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'online'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("worker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'工作进程被衍生后响应'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"setup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setup"}},[t._v("#")]),t._v(" setup")]),t._v(" "),a("ul",[a("li",[t._v("当 "),a("code",[t._v("cluster.setupMaster()")]),t._v(" 被调用时触发")]),t._v(" "),a("li",[t._v("settings 对象是 "),a("code",[t._v("cluster.setupMaster()")]),t._v(" 被调用时的 "),a("code",[t._v("cluster.settings")]),t._v(" 对象；只能查询，因为在一个时间点内 "),a("code",[t._v("cluster.setupMaster()")]),t._v(" 可以被调用多次；如果精确度十分重要，则使用 "),a("code",[t._v("cluster.settings")])])]),t._v(" "),a("h2",{attrs:{id:"属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("cluster.isMaster")]),t._v("：标识主进程(由 "),a("code",[t._v("process.env.NODE_UNIQUE_ID")]),t._v(" 决定，其未定义时该值为 true)")]),t._v(" "),a("li",[a("code",[t._v("cluster.isWorker")]),t._v("：标识工作进程(与 "),a("code",[t._v("isMaster")]),t._v(" 相反)")]),t._v(" "),a("li",[a("code",[t._v("cluster.settings")]),t._v("：配置对象，调用 "),a("code",[t._v("cluster.setupMaster()")]),t._v(" 或 "),a("code",[t._v("cluster.fork()")]),t._v(" 之后产生，包括默认值")]),t._v(" "),a("li",[a("code",[t._v("cluster.schedulingPolicy")]),t._v("：调度策略(可以通过设置 "),a("code",[t._v("NODE_CLUSTER_SCHED_POLICY")]),t._v(" 环境变量来实现)")]),t._v(" "),a("li",[a("code",[t._v("cluster.worker")]),t._v("：当前工作进程对象的引用(对主进程无效)")]),t._v(" "),a("li",[a("code",[t._v("cluster.workers")]),t._v("：一个包含活跃的工作进程对象的哈希表，使用 id 为键名")])]),t._v(" "),a("h2",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("cluster.fork([env])")]),t._v("：衍生一个新的工作进程")]),t._v(" "),a("li",[a("code",[t._v("cluster.disconnect([callback])")]),t._v("：断开连接，在 "),a("code",[t._v("cluster.workers")]),t._v(" 的每个工作进程中调用")]),t._v(" "),a("li",[a("code",[t._v("cluster.setupMaster([settings])")]),t._v("：修改默认的 "),a("code",[t._v("fork")]),t._v(" 行为，调用后将按照 "),a("code",[t._v("cluster.settings")]),t._v(" 进行设置")])]),t._v(" "),a("h2",{attrs:{id:"worker-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#worker-类"}},[t._v("#")]),t._v(" Worker 类")]),t._v(" "),a("ul",[a("li",[t._v("继承 "),a("code",[t._v("EventEmitter")])]),t._v(" "),a("li",[t._v("包含了关于工作进程的所有的公共的信息和方法")]),t._v(" "),a("li",[t._v("在主进程中，可以使用 "),a("code",[t._v("cluster.workers")]),t._v(" 来获取；在工作进程中，可以使用 "),a("code",[t._v("cluster.worker")]),t._v(" 来获取")])]),t._v(" "),a("h3",{attrs:{id:"事件-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件-2"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("exit")]),t._v("：类似 "),a("code",[t._v("cluster.on('exit')")]),t._v(" 事件，但特定于此工作进程")]),t._v(" "),a("li",[a("code",[t._v("online")]),t._v("：类似 "),a("code",[t._v("cluster.on('online')")]),t._v(" 事件，但特定于此工作进程")]),t._v(" "),a("li",[a("code",[t._v("message")]),t._v("：类似 "),a("code",[t._v("cluster.on('message')")]),t._v(" 事件，但特定于此工作进程")]),t._v(" "),a("li",[a("code",[t._v("listening")]),t._v("：类似 "),a("code",[t._v("cluster.on('listening')")]),t._v(" 事件，但特定于此工作进程")]),t._v(" "),a("li",[a("code",[t._v("disconnect")]),t._v("：类似 "),a("code",[t._v("cluster.on('disconnect')")]),t._v(" 事件，但特定于此工作进程")]),t._v(" "),a("li",[a("code",[t._v("error")]),t._v("：和 child_process.fork() 提供的事件相同")])]),t._v(" "),a("h3",{attrs:{id:"属性-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-2"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("worker.id")]),t._v("：当前工作进程的 id")]),t._v(" "),a("li",[a("code",[t._v("worker.process")]),t._v("：所有的工作进程都是通过 "),a("code",[t._v("child_process.fork()")]),t._v(" 来创建的，这个方法返回的对象被存储为 process；在工作进程中， process 属于全局对象")]),t._v(" "),a("li",[a("code",[t._v("worker.exitedAfterDisconnect")]),t._v("：布尔值\n"),a("ul",[a("li",[a("code",[t._v("true")]),t._v("：工作进程由于 "),a("code",[t._v("kill()")]),t._v(" 或 "),a("code",[t._v("disconnect()")]),t._v(" 而退出")]),t._v(" "),a("li",[a("code",[t._v("false")]),t._v("：如果工作进程以任何其他方式退出")]),t._v(" "),a("li",[a("code",[t._v("undefined")]),t._v("：如果工作进程尚未退出")])])])]),t._v(" "),a("h3",{attrs:{id:"方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-2"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("worker.isDead()")]),t._v("：当工作进程被终止时(包括自动退出或被发送信号)返回 true")]),t._v(" "),a("li",[a("code",[t._v("worker.disconnect()")]),t._v("：在一个工作进程内，调用此方法会关闭所有的 server，并等待这些 server 的 'close' 事件执行，然后关闭 IPC 管道；在主进程内，会给工作进程发送一个内部消息，导致工作进程自身调用 .disconnect()")]),t._v(" "),a("li",[a("code",[t._v("worker.isConnected()")]),t._v("：当工作进程通过 IPC 管道连接至主进程时返回 true(工作进程在创建后会自动连接到它的主进程，当 "),a("code",[t._v("disconnect")]),t._v(" 事件触发时才会断开连接)")]),t._v(" "),a("li",[a("code",[t._v("worker.kill([signal])")]),t._v("：杀死工作进程")]),t._v(" "),a("li",[a("code",[t._v("worker.send(message[, sendHandle[, options]][, callback])")]),t._v("：发送消息给工作进程或主进程，可以选择带上句柄")])])])}),[],!1,null,null,null);s.default=e.exports}}]);