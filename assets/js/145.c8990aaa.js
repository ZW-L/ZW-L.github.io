(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{556:function(t,s,n){"use strict";n.r(s);var a=n(25),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"分支管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("git branch")]),t._v("：分支管理")])]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch              "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch hotfix       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建分支，但并未切换到该分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d hotfix    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除指定分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D hotfix    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 强制删除分支(当分支没合并但要删除时，要使用 -D 才能强制删除)")]),t._v("\n")])])]),n("ul",[n("li",[n("code",[t._v("git checkout")]),t._v("：分支切换")])]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout hotfix     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换至指定分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b hotfix  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建并切换至分支")]),t._v("\n")])])]),n("ul",[n("li",[n("code",[t._v("git merge")]),t._v("：合并分支\n"),n("ul",[n("li",[t._v("默认合并方式为 Fast-forward(快进)，即直接使用 merge 记录覆盖被合并分支上的提交记录并移动 HEAD 指针")]),t._v(" "),n("li",[t._v("也可以使用 "),n("code",[t._v("--no-ff")]),t._v(" 指定不快进，此时需要输入合并说明，并且在被合并分支上的提交记录会保留(即使该分支会被删除)")])])])]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 场景1：无冲突时，Fast-forward 方式")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b dev       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个开发分支并切换")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" hello world "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b.txt   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 增加一个文件")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"add b.txt"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换回主分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge dev             "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并 dev 分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d dev         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除 dev 分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log                   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里不会看到分支的提交记录")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 场景2：无冲突，no-ff 方式")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 前几步操作一样")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --no-ff dev     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并分支，使用 --no-ff 方式，此时会弹出编辑器，要求输入合并说明")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log                   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此时分支的提交会在 log 中，并且标记有分支名")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d dev         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除 dev 分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log                   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 分支的提交记录依然存在，但是没有了分支名字标记")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 场景3：出现冲突")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b dev\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" hello "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a.txt\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modify in dev"')]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 dev 分支修改并提交")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" world "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a.txt\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modify in master"')]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 master 分支修改并提交")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --no-ff dev             "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 尝试合并 dev 分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 发生冲突，打开 a.txt，它里面变成了以下内容")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" HEAD\nworld\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\nhello\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" dev\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ======= 用于分隔两个分支的差异")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# <<<<<<< HEAD 表明下面的内容是在当前分支修改的")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>>>>>> dev 表明上面的内容是在 dev 分支修改的")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理冲突：只保留 world 所在行，删除其他四行")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新添加到暂存区")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"final modify"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d dev\n")])])]),n("ul",[n("li",[n("code",[t._v("git rebase")]),t._v("：分支变基，常用来拉取 master 的提交到当前分支，当切换 master 分支 merge 该分支时，会形成线性提交树(其实就是 "),n("code",[t._v("git merge")]),t._v(" 和 "),n("code",[t._v("git merge --no-ff")]),t._v(" 的折中版，既不会删除分支的提交信息，也不会形成交叉的分支)")])]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 假设 master 分支已经领先 dev 分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 方法1：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge dev         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理冲突后，提交树是线性的，但是丢失了 dev 的提交记录")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 方法2：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --no-ff dev "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理冲突后，提交树是非线性的，但保留了 dev 的提交记录")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 方法3：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase master     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 master 分支的提交复制到 dev 分支提交前的位置")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge dev         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不会有冲突，提交树是线性的，且保留了 dev 的提交记录")]),t._v("\n")])])]),n("ul",[n("li",[n("code",[t._v("git stash")]),t._v("：保存当前分支的工作区，可以切换到其他分支修复内容，然后再切换回来，恢复工作区即可\n"),n("ul",[n("li",[n("code",[t._v("git stash list")]),t._v("：查看当前保存的工作区列表")]),t._v(" "),n("li",[n("code",[t._v("git stash pop")]),t._v("：切换最近的一个工作区，并删除记录，工作区列表长度减一")]),t._v(" "),n("li",[n("code",[t._v("git stash apply")]),t._v("：恢复特定或最近的一个工作区，但是不会修改工作区列表")]),t._v(" "),n("li",[n("code",[t._v("git stash drop")]),t._v("：删除特定或最近的一个工作区")])])])]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 场景1：在 dev 分支上开发的时候，线上报警出现 BUG，需要马上解决")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("                       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前在 dev 分支，现将分支上的内容添加至暂存区")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b issue-101       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建并切换到一个 fixup 分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" fixup issue-101 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a.txt    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修复 BUG")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fixup issue-101"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --no-ff issue-101     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交到线上分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d issue-101         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除 fixup 分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout dev                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回 dev 分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop                   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 恢复工作区")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list                  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 之前保存的工作区已经没有了")]),t._v("\n")])])]),n("ul",[n("li",[n("code",[t._v("git cherry-pick")]),t._v("：拣选合并，能够选择一个特定的提交记录合并到当前分支")])]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 场景1：接 stash 的场景1，回到 dev 分支后发现也需要那个 BUG 补丁")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回到 master 分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log                       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 找到 fixup 的那个提交 id(注意不是 merge 的id)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout dev\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick 4b89ffb       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 fixup 提交的记录合并到 dev 分支")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" create "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" d.txt  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 继续在 dev 分支上开发")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"finish dev"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge dev --no-ff         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回到 master 分支，合并 dev 分支(因此已经合并了 fixup，此时不会有冲突)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d dev\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);